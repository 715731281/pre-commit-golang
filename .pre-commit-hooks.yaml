# ==============================================================================
# go-build-mod
#   * Directory-Based
#   * Targets first parent folder with a go.mod file
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-build-mod
    name: 'go-build-mod'
    entry: go-build-mod.sh
    types: [go]
    language: 'script'
    description: "Run 'cd $(mod_root $FILE); go build ./...' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# go-build-dir
#   * Directory-Based
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-build-dir
    name: 'go-build-dir'
    entry: go-build-dir.sh
    types: [go]
    language: 'script'
    description: "Run 'go build ./$(dirname $FILE)' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# go-build-pkg
#   * Directory-Based
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-build-pkg
    name: 'go-build-pkg'
    entry: go-build-pkg.sh
    types: [go]
    language: 'script'
    description: "Run 'go build $(go list)/$(dirname $FILE)' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# go-build-repo
#   * Repo-based
#   * No Target Specified
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-build-repo
    name: 'go-build-repo'
    entry: go-build-repo.sh
    types: [go]
    language: 'script'
    description: "Run 'go build $ARGS' in repo root folder"
    pass_filenames: false

# ==============================================================================
# go-build-repo-dir
#   * Repo-Based
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-build-repo-dir
    name: 'go-build-repo-dir'
    entry: go-build-repo-dir.sh
    types: [go]
    language: 'script'
    description: "Run 'go build ./...' in repo root folder"
    pass_filenames: false

# ==============================================================================
# go-build-repo-pkg
#   * Repo-Based
#   * Executes if any .go files modified
#   * Expects $(go list) in repo root to produce top-level package name
# ==============================================================================
-   id: go-build-repo-pkg
    name: 'go-build-repo-pkg'
    entry: go-build-repo-pkg.sh
    types: [go]
    language: 'script'
    description: "Run 'go build $(go list)/...' in repo root folder"
    pass_filenames: false

# ==============================================================================
# go-test-mod
#   * Directory-Based
#   * Targets first parent folder with a go.mod file
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-test-mod
    name: 'go-test-mod'
    entry: go-test-mod.sh
    types: [go]
    language: 'script'
    description: "Run 'cd $(mod_root $FILE); go test ./...' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# go-test-dir
#   * Directory-Based
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-test-dir
    name: 'go-test-dir'
    entry: go-test-dir.sh
    types: [go]
    language: 'script'
    description: "Run 'go test ./$(dirname $FILE)' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# go-test-pkg
#   * Directory-Based
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-test-pkg
    name: 'go-test-pkg'
    entry: go-test-pkg.sh
    types: [go]
    language: 'script'
    description: "Run 'go test $(go list)/$(dirname $FILE)' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# go-test-repo
#   * Repo-based
#   * No Target Specified
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-test-repo
    name: 'go-test-repo'
    entry: go-test-repo.sh
    types: [go]
    language: 'script'
    description: "Run 'go test $ARGS' in repo root folder"
    pass_filenames: false

# ==============================================================================
# go-test-repo-dir
#   * Repo-Based
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-test-repo-dir
    name: 'go-test-repo-dir'
    entry: go-test-repo-dir.sh
    types: [go]
    language: 'script'
    description: "Run 'go test ./...' in repo root folder"
    pass_filenames: false

# ==============================================================================
# go-test-repo-pkg
#   * Repo-Based
#   * Executes if any .go files modified
#   * Expects $(go list) in repo root to produce top-level package name
# ==============================================================================
-   id: go-test-repo-pkg
    name: 'go-test-repo-pkg'
    entry: go-test-repo-pkg.sh
    types: [go]
    language: 'script'
    description: "Run 'go test $(go list)/...' in repo root folder"
    pass_filenames: false

# ==============================================================================
# go-vet
#   * File-based
# NOTES:
#   `go vet` appears to work on single files when given them as args.
# ==============================================================================
-   id: go-vet
    name: 'go-vet'
    entry: go-vet.sh
    types: [go]
    language: 'script'
    description: "Run 'go vet $FILE' for each staged .go file"
    pass_filenames: true

# ==============================================================================
# go-vet-mod
#   * Directory-Based
#   * Targets first parent folder with a go.mod file
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-vet-mod
    name: 'go-vet-mod'
    entry: go-vet-mod.sh
    types: [go]
    language: 'script'
    description: "Run 'cd $(mod_root $FILE); go vet ./...' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# go-vet-dir
#   * Directory-Based
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-vet-dir
    name: 'go-vet-dir'
    entry: go-vet-dir.sh
    types: [go]
    language: 'script'
    description: "Run 'go vet ./$(dirname $FILE)' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# go-vet-pkg
#   * Directory-Based
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-vet-pkg
    name: 'go-vet-pkg'
    entry: go-vet-pkg.sh
    types: [go]
    language: 'script'
    description: "Run 'go vet $(go list)/$(dirname $FILE)' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# go-vet-repo
#   * Repo-based
#   * No Target Specified
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-vet-repo
    name: 'go-vet-repo'
    entry: go-vet-repo.sh
    types: [go]
    language: 'script'
    description: "Run 'go vet $ARGS' in repo root folder"
    pass_filenames: false

# ==============================================================================
# go-vet-repo-dir
#   * Repo-Based
#   * Executes if any .go files modified
# ==============================================================================
-   id: go-vet-repo-dir
    name: 'go-vet-repo-dir'
    entry: go-vet-repo-dir.sh
    types: [go]
    language: 'script'
    description: "Run 'go vet ./...' in repo root folder"
    pass_filenames: false

# ==============================================================================
# go-vet-repo-pkg
#   * Repo-Based
#   * Executes if any .go files modified
#   * Expects $(go list) in repo root to produce top-level package name
# ==============================================================================
-   id: go-vet-repo-pkg
    name: 'go-vet-repo-pkg'
    entry: go-vet-repo-pkg.sh
    types: [go]
    language: 'script'
    description: "Run 'go vet $(go list)/...' in repo root folder"
    pass_filenames: false

# ==============================================================================
# go-fmt-fix
#   * File-based
#   * Modifies files
# NOTES:
#   `go fmt` delegates to `gofmt`, so we'll invote `gofmt` directly.
# ==============================================================================
-   id: go-fmt-fix
    name: 'go-fmt-fix'
    entry: go-fmt-fix.sh
    types: [go]
    language: 'script'
    description: "Run 'gofmt -l -w $FILE' for each staged .go file"
    pass_filenames: true

# ==============================================================================
# go-imports-fix
#   * File-based
#   * Modifies files
# NOTES:
#   Replaces go-fmt-fix
# ==============================================================================
-   id: go-imports-fix
    name: 'go-imports-fix'
    entry: go-imports-fix.sh
    types: [go]
    language: 'script'
    description: "Run 'goimports -l -w $FILE' for each staged .go file"
    pass_filenames: true

# ==============================================================================
# go-returns-fix
#   * File-based
#   * Modifies files
# NOTES:
#   Replaces go-imports-fix & go-fmt-fix
# ==============================================================================
-   id: go-returns-fix
    name: 'go-returns-fix'
    entry: go-returns-fix.sh
    types: [go]
    language: 'script'
    description: "Run 'goreturns -p -l -w $FILE' for each staged go file"
    pass_filenames: true

# ==============================================================================
# go-lint
#   * File-based
# ==============================================================================
-   id: go-lint
    name: 'go-lint'
    entry: go-lint.sh
    types: [go]
    language: 'script'
    description: "Run 'golint $FILE' for each staged .go file"
    pass_filenames: true

# ==============================================================================
# go-critic
#   * File-based
# ==============================================================================
-   id: go-critic
    name: 'go-critic'
    entry: go-critic.sh
    types: [go]
    language: 'script'
    description: "Run 'gocritic check $FILE' for each staged .go file"
    pass_filenames: true

# ==============================================================================
# golangci-lint
#   * File-based
# NOTES:
#   `golangci-lint` appears to work on single files when given them as args.
# ==============================================================================
-   id: golangci-lint
    name: 'golangci-lint'
    entry: golangci-lint.sh
    types: [go]
    language: 'script'
    description: "Run 'golangci-lint run $FILE' for each staged .go file"
    pass_filenames: true

# ==============================================================================
# golangci-lint-fix
#   * File-based
#   * Modifies files
# NOTES:
#   `golangci-lint` appears to work on single files when given them as args.
# ==============================================================================
-   id: golangci-lint-fix
    name: 'golangci-lint-fix'
    entry: golangci-lint-fix.sh
    types: [go]
    language: 'script'
    description: "Run 'golangci-lint run --fix $FILE' for each staged .go file"
    pass_filenames: true

# ==============================================================================
# golangci-lint-mod
#   * Directory-Based
#   * Targets first parent folder with a go.mod file
#   * Executes if any .go files modified
# ==============================================================================
-   id: golangci-lint-mod
    name: 'golangci-lint-mod'
    entry: golangci-lint-mod.sh
    types: [go]
    language: 'script'
    description: "Run 'cd $(mod_root $FILE); golangci-lint run ./...' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# golangci-lint-mod-fix
#   * Directory-Based
#   * Targets first parent folder with a go.mod file
#   * Modifies files
#   * Executes if any .go files modified
# ==============================================================================
-   id: golangci-lint-mod-fix
    name: 'golangci-lint-mod-fix'
    entry: golangci-lint-mod-fix.sh
    types: [go]
    language: 'script'
    description: "Run 'cd $(mod_root $FILE); golangci-lint run --fix ./...' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# golangci-lint-dir
#   * Directory-Based
#   * Executes if any .go files modified
# ==============================================================================
-   id: golangci-lint-dir
    name: 'golangci-lint-dir'
    entry: golangci-lint-dir.sh
    types: [go]
    language: 'script'
    description: "Run 'golangci-lint run ./$(dirname $FILE)' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# golangci-lint-dir-fix
#   * Directory-Based
#   * Modifies files
#   * Executes if any .go files modified
# ==============================================================================
-   id: golangci-lint-dir-fix
    name: 'golangci-lint-dir-fix'
    entry: golangci-lint-dir-fix.sh
    types: [go]
    language: 'script'
    description: "Run 'golangci-lint run --fix ./$(dirname $FILE)' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# golangci-lint-pkg
#   * Directory-Based
#   * Executes if any .go files modified
# ==============================================================================
-   id: golangci-lint-pkg
    name: 'golangci-lint-pkg'
    entry: golangci-lint-pkg.sh
    types: [go]
    language: 'script'
    description: "Run 'golangci-lint run $(go list)/$(dirname $FILE)' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# golangci-lint-pkg-fix
#   * Directory-Based
#   * Modifies files
#   * Executes if any .go files modified
# ==============================================================================
-   id: golangci-lint-pkg-fix
    name: 'golangci-lint-pkg-fix'
    entry: golangci-lint-pkg-fix.sh
    types: [go]
    language: 'script'
    description: "Run 'golangci-lint run --fix $(go list)/$(dirname $FILE)' for each staged .go file"
    pass_filenames: true
    require_serial: true

# ==============================================================================
# golangci-lint-repo
#   * Repo-based
#   * No Target Specified
#   * Executes if any .go files modified
# ==============================================================================
-   id: golangci-lint-repo
    name: 'golangci-lint-repo'
    entry: golangci-lint-repo.sh
    types: [go]
    language: 'script'
    description: "Run 'golangci-lint run' in repo root folder"
    pass_filenames: false

# ==============================================================================
# golangci-lint-repo-fix
#   * Repo-based
#   * No Target Specified
#   * Executes if any .go files modified
#   * Modifies files
# ==============================================================================
-   id: golangci-lint-repo-fix
    name: 'golangci-lint-repo-fix'
    entry: golangci-lint-repo-fix.sh
    types: [go]
    language: 'script'
    description: "Run 'golangci-lint run --fix' in repo root folder"
    pass_filenames: false
